version: "3.3"
services:
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app/src/frontend
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      prox_flow_network:
        aliases:
          - prox_flow_web_frontend
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./src/backend:/app/src/backend
    depends_on:
      - postgres
    env_file:
      - .env
    networks:
      prox_flow_network:
        aliases:
          - prox_flow_web_backend
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ./src/backend/static:/app/src/backend/static
    ports:
      - "81:81"
    depends_on:
      - backend
#  postgres:
#    image: postgres:15.3
#    restart: always
#    command: postgres -c port=${POSTGRES_PORT}
#    environment:
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - POSTGRES_PORT=${POSTGRES_PORT}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    env_file:
#      - .env
#    volumes:
#      - ./data:/var/lib/postgresql/data
#      - ./data/init.sql:/var/lib/postgresql/data/init.sql
#    ports:
#      - "5433:5433"
#    expose:
#      - "5433"
#    networks:
#      prox_flow_network:
#        aliases:
#          - prox_flow_postgres
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
networks:
  prox_flow_network: